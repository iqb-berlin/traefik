x-logging-options: &default-logging-options
  options:
    max-size: "10m"
    max-file: "3"


services:
  ingress-controller:
    image: traefik:2.10
    restart: always
    ports:
      - "${HTTP_PORT}:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ingress-network
      - application-network

  ingress-oauth2-proxy:
    image: &oauth2-proxy-image quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
    restart: always
    depends_on:
      - ingress-controller
      - identity-provider
    networks:
      - application-network
    deploy:
      mode: global

  maintenance-page:
    image: nginx:stable
    restart: always
    volumes:
      - ./config/maintenance-page/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./config/maintenance-page/maintenance.html:/usr/share/nginx/html/maintenance.html:ro
    networks:
      - application-network

  identity-provider:
    image: quay.io/keycloak/keycloak:22.0
    restart: always
    depends_on:
      identity-provider-db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://identity-provider-db/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: keycloak.${SERVER_NAME}
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_EXTRA_ARGS_PREPENDED: "--spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true"
    networks:
      - application-network

  identity-provider-db:
    image: postgres:14.8-bookworm
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 3s
      start_period: 60s
      start_interval: 1s
      retries: 5
    volumes:
      - keycloak_vol:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST: identity-provider-db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - application-network

  grafana:
    image: grafana/grafana:9.5.1
    restart: always
    depends_on:
      - prometheus
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_vol:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - application-network
    logging:
      <<: *default-logging-options

  prometheus:
    image: prom/prometheus:v2.43.0
    restart: always
    depends_on:
      - cadvisor
    volumes:
      - ./config/prometheus/:/etc/prometheus:ro
      - prometheus_vol:/prometheus
    networks:
      - application-network
    logging:
      <<: *default-logging-options

  prometheus-oauth2-proxy:
    image: *oauth2-proxy-image
    restart: always
    depends_on:
      - prometheus
      - identity-provider
    networks:
      - application-network
    deploy:
      mode: global

  node-exporter:
    image: prom/node-exporter:v1.6.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - "--path.rootfs=/host"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - application-network
    restart: always
    logging:
      <<: *default-logging-options
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  node-exporter-oauth2-proxy:
    image: *oauth2-proxy-image
    restart: always
    depends_on:
      - identity-provider
      - node-exporter
    networks:
      - application-network
    deploy:
      mode: global

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    restart: always
    privileged: true
    command:
      - "--enable_metrics=cpu,memory,network"
      - "--store_container_labels=false"
      - "--docker_only=true"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    networks:
      - application-network
    logging:
      <<: *default-logging-options
    deploy:
      mode: global
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  cadvisor-oauth2-proxy:
    image: *oauth2-proxy-image
    restart: always
    depends_on:
      - cadvisor
      - identity-provider
    networks:
      - application-network
    deploy:
      mode: global

  dozzle:
    image: amir20/dozzle:v4.11.2
    restart: always
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_NO_ANALYTICS: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - application-network
    logging:
      <<: *default-logging-options
    deploy:
      mode: global

  dozzle-oauth2-proxy:
    image: *oauth2-proxy-image
    restart: always
    depends_on:
      - dozzle
      - identity-provider
    networks:
      - application-network
    deploy:
      mode: global


volumes:
  grafana_vol:
  prometheus_vol:
  keycloak_vol:

networks:
  ingress-network:
    name: ingress-net
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: $DOCKER_DAEMON_MTU
  application-network:
    name: app-net
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: $DOCKER_DAEMON_MTU
